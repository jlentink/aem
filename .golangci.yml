# options for analysis running
run:
  # default concurrency is a available cpu number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: false

  # list of build tags, all linters use it. default is empty list.
  build-tags:

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, godeps$, builtin$
  skip-dirs:

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. if it's not please let us know.
  skip-files:
    - ".*\\.my\\.go$"
    - lib/bad.go

  # by default isn't set. if set we pass it to "go list -mod={option}". from "go help modules":
  # if invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. instead, it fails when any changes
  # to go.mod are needed. this setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # if invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode:


# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true


# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(mystruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.atoi(numstr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

    # [deprecated] comma-separated list of pairs of the form pkg:regex
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    ignore: fmt:.*,io/ioutil:^read.*

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    exclude: ./excluding-functions.txt
  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.log).infof
          - (github.com/golangci/golangci-lint/pkg/logutils.log).warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.log).errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.log).fatalf
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/org/project
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
      - github.com/davecgh/go-spew/spew
  misspell:
    # correct spellings using locale preferences for us or uk.
    # default is to use a neutral variety of english.
    # setting locale to us will correct the british spelling of 'colour' to 'color'.
    locale: us
    ignore-words:
      - someword
  lll:
    # max line length, lines longer will be reported. default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. default to 1.
    tab-width: 1
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # xxx: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. all text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unparam:
    # inspect exported functions, default is false. set to true if no external program/library imports your code.
    # xxx: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. all text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # xxx: we don't recommend using this linter before doing performance profiling.
    # for most programs usage of prealloc will be a premature optimization.

    # report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # true by default.
    simple: true
    range-loops: true # report preallocation suggestions on range loops, true by default
    for-loops: false # report preallocation suggestions on for loops, false by default
  gocritic:
    # which checks should be enabled; can't be combined with 'disabled-checks';
    # see https://go-critic.github.io/overview#checks-overview
    # to check which checks are enabled run `gl_debug=gocritic golangci-lint run`
    # by default list of stable checks is used.
    enabled-checks:

    # which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - regexpmust

    # enable multiple checks by tags, run `gl_debug=gocritic golangci-lint` run to see all tags and checks.
    # empty list by default. see https://github.com/go-critic/go-critic#usage -> section "tags".
    enabled-tags:
      - performance

    settings: # settings passed to gocritic
      captlocal: # must be valid enabled check name
        paramsonly: true
      rangevalcopy:
        sizethreshold: 32

linters:
  enable:
    - megacheck
    - govet
  enable-all: false
  disable:
    - maligned
    - prealloc
    - gosec
  disable-all: false
  presets:
    - bugs
    - unused
  fast: false


issues:
  # list of regexps of issue texts to exclude, empty list by default.
  # but independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. to list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - abcdef

  # excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec

    # exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: internal/hmac/
      text: "weak cryptographic primitive"
      linters:
        - gosec

    # exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "sa9003:"

    # exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. to list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # default value for this option is true.
  exclude-use-default: false

  # maximum issues count per one linter. set to 0 to disable. default is 50.
  max-issues-per-linter: 0

  # maximum count of issues with the same text. set to 0 to disable. default is 3.
  max-same-issues: 0

  # show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in head~ are analyzed.
  # it's a super-useful option for integration of golangci-lint into existing
  # large codebase. it's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # default is false.
  new: false

